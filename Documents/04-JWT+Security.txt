|----------------------------------------------------------------------------------------------------------------------|
|---------------------------------------------------JWT + SECURITY-----------------------------------------------------|
|----------------------------------------------------------------------------------------------------------------------|
    JWT (JSON Web Token)
        Web servis içindeki metotları kullanmak için yetki oluşturmak için kullanılır.
        Bir JWT 3 parçadan oluşur. Token "." işaretleri ile parçalanmıştır.
            Header              : Token'ın şifrelendiği algoritma bilgisinin tutulduğu alandır.
            Payload             : Data'nın tutulduğu alandır. Kullanıcı adı, oluşturma tarihi yetkileri içerir.
            Verify Signature    : İmza bölümü, belirli bir imza ile kriptolama işlemini yapar.
                                Bir secret ket oluşturarak token oluşturup çözülür.


            Authentication  : Kimlik doğrulama
            Authorization   : Sisteme giriş yetki kontrolü

             +------+    +------+    +----------+    +-------+    +----------------+    +--------+
             |Filter| => |Client| => |Controller| => |Service| => |DAO (Repository)| => |DataBase|
             +------+    +------+    +----------+    +-------+    +----------------+    +--------+
               ^^
            Filter: Token isteğinin doğrulandığı alandır. Kriterden geçerse controllere geçer.
            Başarılı ise isteğe cevap verir. Başarısız ise cevap vermez. Bu sayede yetkisiz kullanıcıların
            sisteme girişine izin verilmez.

------------------------------------------------------------------------------------------------------------------------
        JWT Mimarisinin Kurulması İçin İzlenecek Adımlar
------------------------------------------------------------------------------------------------------------------------
        1- JwtService adında token üretip parse edebilen bir servis yazıldı.
        Spring container da nesnesi oluşması için @Comonent anotasyonu ile işaretlendi.

        2- JwtAuthenticationFilter adında filtre katmanı olarak çalışacak bir sınıf oluşturuldu.
        Spring container da bean oluşması için @Component anotasyonu ile işaretlendi
        OncePerRequestFilter sınıfı extend edilerek security yeteneklerinin kullanımı sağlandı.
        Bu katman kullanıcın yetkisi varsa Contoller katmanını kullanma izni verir, yoksa izin vermez.

        3- AppConfig adında bir sınıf oluşturularak burada kullanıcını veritabanında aranması,
        password encoding işlemlerinin yapılması ve authenticationProvider metodu ile kullanıcı kontrolleri yapıldı.
        AppConfig sınıfının bir konfigürasyon sınıfı olduğunu spring context de tanımlamak için
        @Configuration anotasyonu ile işaretlendi.

        4- SecurityConfig adında bir sınıf oluşturularak @Copmonent ile spring container da bean oluşturması sağlandı.
        @EnableWebSecurity ile bu sınıfın web security yeteneği aktif edildi.
        Bu sınıf bize "/authenticate" ve "/register" path i ile gelen http requestlerinin controller katmanına erişimine izin vererek
        kullanıcı yetki kontrolü ve yeni kayıtlarda http isteklerinin filtrelenmesini engeller.
        "/authenticate" ve "/register" haricinde gelen isteklerin tamamını filter katmanında yetki kontrollerine tabi tutar.

        5- AuthServiceImpl sınıfı ile AuthRequest nesnesi ile alınan kullanıcı adı şifre ile register ve authenticate işlemleri yaptırıldı.

        6- JwtService adında bir sınıf oluşturuldu ve kullanıcının oturum süresinin açık kalacağı süre için geçerli olacak token üretildi.
        AuthRequest sınıfı ile tanımlanan username ve password AuthServiceImpl sınıfında doğrulanarak  AuthResponse ile token frontend e gönderildi.

        7- Kullanıcının oturumu zaman aşımına uğradığı durumlar için refresh token service ve repository sınıfları oluşturuldu.
        Controller RestAuthControllerImpl altında olacak şekilde yazıldı.
        Refresh token access token zaman aşımına ugradığında oturumu yenilemek için kullanılacak.

        8- Bu url isteği de "/authenticate" ve "/register" gibi filter katmanını bypass edecek. bu nedenle SecurityConfin içine tanımlamalar yapıldı.

        9- Access token expire olduğunda AuthResponse da bulunan refresh token ile yeni token isteğinde bulunuyor ve hem access token hem de refresh token yenileniyor.

        10- Frontend de refresh token storage da ya da farklı teknolojiler ile saklanır.



        Secret Key Generator:
            https://8gwifi.org/jwsgen.jsp

        Kaynak:
            https://jwt.io/
            https://tugrulbayrak.medium.com/jwt-json-web-tokens-nedir-nasil-calisir-5ca6ebc1584a
            https://tugrulbayrak.medium.com/jwt-json-web-tokens-ile-express-rest-api-g%C3%BCvenli%C4%9Fi-2-517cc44e846c