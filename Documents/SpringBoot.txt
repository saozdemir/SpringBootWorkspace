|----------------------------------------------------------------------------------------------------------------------|
|-----------------------------------------------------SPRING BOOT------------------------------------------------------|
|----------------------------------------------------------------------------------------------------------------------|
    Spring Nedir?
    Bir framework'tür.
    Kendi içinde parçalara ayrılır. Her parçanın bir görevi vardır ve ihtiyacımız olduğu kadarı projeye import edilir.
    - Bir container oluşturup nesne tanımlamaya: Inversion of Control (IoC)
    - Contaier dan nesne enjekte etmeye: Dependency Injection (DI)
------------------------------------------------------------------------------------------------------------------------
        Dependencies:
------------------------------------------------------------------------------------------------------------------------
            Security: Güvenlik
            JPA: JPA ile veritabanı işlemleri yapılacaksa
            SQL Driver: Veritabanın türüne göre dirver eklemesi
            Spring Web: REST API geliştirmeleri

------------------------------------------------------------------------------------------------------------------------
        Kaynak:
------------------------------------------------------------------------------------------------------------------------
            https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/overview.html

------------------------------------------------------------------------------------------------------------------------
    Microservice Nedir?
------------------------------------------------------------------------------------------------------------------------
    Projeyi bir bütün halinde değil küçük küçük parçalara bölmeye microservice mimarisi denir.

    Kaynak:
        https://spring.io/microservices

------------------------------------------------------------------------------------------------------------------------
    Spring Projesi Mimarisi
------------------------------------------------------------------------------------------------------------------------
    Application.java        => Spring uygulamasını ayağa kaldıran sınıftır.
    application.properties  => Veritabanı ile çalışırken konfigürasyon ayarları buraya yazılır.

------------------------------------------------------------------------------------------------------------------------
    Maven
------------------------------------------------------------------------------------------------------------------------
    Bağımlıkıl yöneticisidir. Çalışma prensibi:
    1- pom.xml dosyasındaki dependecyleri okur.
    2- İlk önce maven local repoda arar ve bulursa alır.
    3- Bulamazsa central repoya gidip buradan alır.
    4- Eğer maen repoda da yoksa repositories altında tanımlanan repo varsa bu repolara gider.

------------------------------------------------------------------------------------------------------------------------
    Uygulama Sunucusu
------------------------------------------------------------------------------------------------------------------------
    Bir java EE uygulamasını ayağa kaldıran, kontol eden ve HTTP protokolü ile uygulamayı dışarı açar.
    Ayrıca hata varsa bu hataları izleme imkanı sunar.
    (Spring embedded Tomcat kullanıyor.)

------------------------------------------------------------------------------------------------------------------------
    Context ve Bean
------------------------------------------------------------------------------------------------------------------------
    Context bir kap ya da kase gibi düşünülürse, bean bu kase içindeki fasulye gibidir.
        Context : @Bean anotasyonu eklenince context için bean sınıfı tanımanmış olur.
        Bean    : Java Classları ortak kullanılan yapılar context içinde bean olarak tanımlanır ve ihtiyaç oldukça çağrılır.
            * Bean Oluşturma Yöntemleri:
                1- @Bean anotsyonu ile
                2- sterotype (@Component > @Servie, @Repository, @Controller) ile oluşturma
                3- Programmatically

------------------------------------------------------------------------------------------------------------------------
        Lombok
------------------------------------------------------------------------------------------------------------------------
    Anotasyon kullanarak getter setter ve constructor yazma zahmetinden kurtaran anotasyon üretme kütüphanesidir.
    Kurulum:
        1- Lombok sitesinden jar dosyasını indir ve kurulacak ide yi seçerek yükle.
            (Idea da plugin olarak mevcut.)
        2- Lombok kütüphanesini projeye ekle
        3- Rebuild et

        Annotation
            @Getter             : get metotlarını otomatik ekler.
            @Setter             : set metotlarını otomatik ekler
            @Data               : getter ve setter her ikisini de ekler
            @NoArgsConstructor  : parametresiz constructor
            @AllArgsConstructor : parametre alan constructor.

            FasterXML Kütüphanesi
            @JsonInclude(JsonInclude.Include.NON_NULL)  : Bu anotasyon ile bir dataclass(dto) da boş alanlar varsa bunları dönmez.

------------------------------------------------------------------------------------------------------------------------
        Spring Application Starter Settings
------------------------------------------------------------------------------------------------------------------------
    Spring uygulaması ayağa kaldırılırken kullandığımız yeteneklere göre @SpringBootApplication anotasyonu ile işaretlenmiş starter classına aşağıdaki tanımlamaların yapılması gereklidir.
        @EntityScan(basePackages = {"com.sao"})             : @Entity anotasyonu ile işaterli sınıfların spring uygulamasında görülmesini sağlar.
        @ComponentScan(basePackages = {"com.sao"})          : @RestController, @Service ve @Repository anotasyonları ile işaterli sınıfların spring uygulamasında görülmesini sağlar.
        @EnableJpaRepositories(basePackages = {"com.sao"})  : JpaRepositroy interface ini kullanırsak bu sınıfları görmesini sağlar.

------------------------------------------------------------------------------------------------------------------------
        Spring Validations
------------------------------------------------------------------------------------------------------------------------
    Spring validation bağımlılığı eklenerek kullanılır. (Annotationlar Jakarta olmalı)
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-validation</artifactId>
                </dependency>

    @NotNull    : Null olmasını istemdiğimiz alanlar için kullanılır.
    @NotEmpty   : Null ve Empty olmasını istemediklerimiz için kullanılır.
           Blank   : String name;       gibi tanımlanırsa.
           Null    : String name=null;  gibi tanımlanırsa.
           Empty   : String name="";    gibi tanımlanırsa.
    @Size       : Minimum ve Maksimum değerleri kontorl eder.
    @Min        : Sadece minimum değer kontrolü
    @Max        : Sadece maksimum değer kontrolü
    @Email      : Email formatında giriş yapılıp yapılmadığını kontrol eder.
    @Valid      : DTO Sınıfında tanımlı valid anotasyonlarını aktif hale getirir.

    DTO Class'da tanımlanan validasyonların çalışabilmesi için RestController de tanımlanan  alana @Valid anotasyonu eklenmelidir.
                @NotNull(message = "İsim alanı boş bırakılamaz!")
                private String name;
               ------
                @PostMapping("/save")
                @Override                                  ------
                public StudentDto saveStudent(@RequestBody @Valid StudentDtoIU studentDtoIU) {
                                                           ------
                    return studentService.saveStudent(studentDtoIU);
                }

------------------------------------------------------------------------------------------------------------------------
        Application Properties
------------------------------------------------------------------------------------------------------------------------
        Bunun benzeri .properties değil .yaml uzantılı dosyadır. Sadece farklı standarda sahiptir.
        Spring uygulama ayağa kalkarken application.properties dosyasını okuyup buna göre ayarlamaları yapar.
        Mevcut spring sabitleri yerine kendi değişken ayarlamalarımızı da tanımlayabiliriz.

        @PropertySource : application.properties dosyasında farklı bir isim vermek istenirse, Spring Projesinini ayağa kaldırıldığı
                        @SpringBootApplication anotasyonu ile işaretli sınıfa
                        @PropertySource(value = "classpath:app.properties") anotasyon eklemesi yapılır.
        @Value          : application.properties dosyasından veri çekmek için kullanılır. Bu yeteneği kullanabilmek için bu anotasyonun kullanıldığı sınıfa
                        @Component anotasyonu eklenmelidir. Bu sayede Uygulama ayağa kalkardan @Value anotasyonu ile işaretlenen alanlar properties dosyasından doldurulur ve spring container da bean oluşur.

        @ConfigurationProperties    : @Value anotasyonu ile daha hızlı ve tek veriler okunurken @ConfigurationProperties
                                    iç içe geçmiş daha karmaşık yapıları java class'ı gibi okumayı sağlar.
                                    1- Bir Class oluşturularak başına @ConfigurationProperties anotasyonu eklenir.
                                    2- @ConfigurationProperties(prefix = "app") prefix özelliği ile request mapping path özelliği gibi bir base eklenir.
                                       Eklenen bu base application.properties dosyasında ortak olan key kısmını ifade eder.
                                    3- class'da alanlara verilen isimler ile application.properties dosyasındaki alanlar aynı olmalıdır.
                                    4- Kullanabilmek için SpringBoot projesini ayağa kaldıran sınıfa
                                    @EnableConfigurationProperties(value = GlobalPropertiesConfig.class) anotasyonu eklenmelidir.

        Kaynak:
            https://medium.com/@sercan.bedir/spring-boot-application-properties-yap%C4%B1s%C4%B1-4027ba02bcce

------------------------------------------------------------------------------------------------------------------------
        Exception Handling
------------------------------------------------------------------------------------------------------------------------


    @ControllerAdvice   : Bir sınıfın ExceptionHandler sınıfı olduğunu tanıtmak için kullanılır.
    @ExceptionHandler   : Hanadle metodu üserinde tanımlanır. Metodun hangi exception u handle edeceğini belirtmek için:
                            @ExceptionHandler(value = MethodArgumentNotValidException.class) şeklinde kullanılır.

        Kaynak:
            https://dincdev.medium.com/exception-handling-in-java-ceaf264bef25

------------------------------------------------------------------------------------------------------------------------
        Scheduled
------------------------------------------------------------------------------------------------------------------------
        Bir servis yazıldığında beli bir saat ve zamanda çalışması isteniyorsa @Scheduled anatosyonu kullanılarak bu işlem yapılabilir.


        Kaynak:
            https://www.baeldung.com/spring-scheduled-tasks
------------------------------------------------------------------------------------------------------------------------

Ortak Versiyon Bilgileri
    Java        : 17.0.8
    Spring      : 3.4.1
    Maven       : 3.9.9 (Bundled)
    PostgreSQL  : 16.2.1 (psql -V -> 16.2) 16.6.3
                  14.15 (binary)
------------------------------------------------------------------------------------------------------------------------

 https://github.com/saozdemir/SpringBootWorkspace.git