|----------------------------------------------------------------------------------------------------------------------|
|-----------------------------------------------------SPRING BOOT------------------------------------------------------|
|----------------------------------------------------------------------------------------------------------------------|
    Spring Nedir?
    Bir framework'tür.
    Kendi içinde parçalara ayrılır. Her parçanın bir görevi vardır ve ihtiyacımız olduğu kadarı projeye import edilir.
    - Bir container oluşturup nesne tanımlamaya: Inversion of Control (IoC)
    - Contaier dan nesne enjekte etmeye: Dependency Injection (DI)
------------------------------------------------------------------------------------------------------------------------
        Dependencies:
------------------------------------------------------------------------------------------------------------------------
            Security: Güvenlik
            JPA: JPA ile veritabanı işlemleri yapılacaksa
            SQL Driver: Veritabanın türüne göre dirver eklemesi
            Spring Web: REST API geliştirmeleri

------------------------------------------------------------------------------------------------------------------------
        Kaynak:
------------------------------------------------------------------------------------------------------------------------
            https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/overview.html

------------------------------------------------------------------------------------------------------------------------
    Microservice Nedir?
------------------------------------------------------------------------------------------------------------------------
    Projeyi bir bütün halinde değil küçük küçük parçalara bölmeye microservice mimarisi denir.

    Kaynak:
        https://spring.io/microservices

------------------------------------------------------------------------------------------------------------------------
    Spring Projesi Mimarisi
------------------------------------------------------------------------------------------------------------------------
    Application.java        => Spring uygulamasını ayağa kaldıran sınıftır.
    application.properties  => Veritabanı ile çalışırken konfigürasyon ayarları buraya yazılır.

------------------------------------------------------------------------------------------------------------------------
    Maven
------------------------------------------------------------------------------------------------------------------------
    Bağımlıkıl yöneticisidir. Çalışma prensibi:
    1- pom.xml dosyasındaki dependecyleri okur.
    2- İlk önce maven local repoda arar ve bulursa alır.
    3- Bulamazsa central repoya gidip buradan alır.
    4- Eğer maen repoda da yoksa repositories altında tanımlanan repo varsa bu repolara gider.

------------------------------------------------------------------------------------------------------------------------
    Uygulama Sunucusu
------------------------------------------------------------------------------------------------------------------------
    Bir java EE uygulamasını ayağa kaldıran, kontol eden ve HTTP protokolü ile uygulamayı dışarı açar.
    Ayrıca hata varsa bu hataları izleme imkanı sunar.
    (Spring embedded Tomcat kullanıyor.)

------------------------------------------------------------------------------------------------------------------------
    Context ve Bean
------------------------------------------------------------------------------------------------------------------------
    Context bir kap ya da kase gibi düşünülürse, bean bu kase içindeki fasulye gibidir.
        Context : @Bean anotasyonu eklenince context için bean sınıfı tanımanmış olur.
        Bean    : Java Classları ortak kullanılan yapılar context içinde bean olarak tanımlanır ve ihtiyaç oldukça çağrılır.
            * Bean Oluşturma Yöntemleri:
                1- @Bean anotsyonu ile
                2- sterotype (@Component > @Servie, @Repository, @Controller) ile oluşturma
                3- Programmatically

------------------------------------------------------------------------------------------------------------------------
        Lombok
------------------------------------------------------------------------------------------------------------------------
    Anotasyon kullanarak getter setter ve constructor yazma zahmetinden kurtaran anotasyon üretme kütüphanesidir.
    Kurulum:
        1- Lombok sitesinden jar dosyasını indir ve kurulacak ide yi seçerek yükle.
            (Idea da plugin olarak mevcut.)
        2- Lombok kütüphanesini projeye ekle
        3- Rebuild et

        Annotation
            @Getter             : get metotlarını otomatik ekler.
            @Setter             : set metotlarını otomatik ekler
            @Data               : getter ve setter her ikisini de ekler
            @NoArgsConstructor  : parametresiz constructor
            @AllArgsConstructor : parametre alan constructor.
            @UtilityClass       : sınıfın nesnesi üretilmez tüm metotlar statik olur.

            FasterXML Kütüphanesi
            @JsonInclude(JsonInclude.Include.NON_NULL)  : Bu anotasyon ile bir dataclass(dto) da boş alanlar varsa bunları dönmez.

------------------------------------------------------------------------------------------------------------------------
        Annotations
------------------------------------------------------------------------------------------------------------------------
        @MappedSuperclass           : Bu anotasyon ile sınıfın bir entity olmadığını, sadece diğer entity sınıflarının miras alacağı bir sınıf olduğunu belirtiriz.
        @Entity                     : Bu anotasyon ile sınıfın bir entity olduğunu belirtiriz.
        @Table(name = "student")    : Bu anotasyon ile sınıfın veritabanında hangi tabloya karşılık geldiğini belirtiriz.
        @Table(name = "gallerist_car", uniqueConstraints = {@UniqueConstraint(columnNames = {"gallerist_id", "car_id"}, name = "uq_gallerist_car")})
                                    : Bu anotasyon ile sınıfın veritabanında hangi tabloya karşılık geldiğini belirtiriz. Ayrıca unique constraint ekleriz.
                                    gallerist_id ve car_id sütunlarının birleşiminin unique olmasını sağlar.
        @Id                         : Bu anotasyon ile sınıfın primary key alanını belirtiriz.
        @GeneratedValue(strategy = GenerationType.IDENTITY) : Bu anotasyon ile primary key alanının otomatik artan bir alan olduğunu belirtiriz.
            strategy = GenerationType.IDENTITY : Bu strateji ile veritabanı otomatik artan alanı kendisi yönetir.
            strategy = GenerationType.AUTO : Bu strateji ile veritabanı otomatik artan alanı kendisi yönetir. (Hangi veritabanı kullanılıyorsa ona göre ayarlar.)
            strategy = GenerationType.SEQUENCE : Bu strateji ile veritabanı otomatik artan alanı kendisi yönetir. (PostgreSQL için kullanılır.)
            strategy = GenerationType.TABLE : Bu strateji ile veritabanı otomatik artan alanı kendisi yönetir. (Tablo kullanarak otomatik artan alanı yönetir.)
            strategy = GenerationType.UUID : Bu strateji ile veritabanı otomatik artan alanı kendisi yönetir. (UUID kullanarak otomatik artan alanı yönetir.)
            strategy = GenerationType.NONE : Bu strateji ile veritabanı otomatik artan alanı kendisi yönetmez. (Bu durumda primary key alanını kendimiz yönetmeliyiz.)
        @Column(name = "name")      : Bu anotasyon ile sınıfın veritabanında hangi sütuna karşılık geldiğini belirtiriz.
        @Transient                  : Bu anotasyon ile sınıfın veritabanında karşılık gelmediğini belirtiriz. (Bu alan veritabanında tutulmaz.)
        @JsonIgnore                 : Bu anotasyon ile sınıfın veritabanında karşılık gelmediğini belirtiriz. (Bu alan veritabanında tutulmaz. JSON dönüşümünde bu alanı yok sayar.)
        @JsonProperty("name")       : Bu anotasyon ile sınıfın veritabanında hangi sütuna karşılık geldiğini belirtiriz. (JSON dönüşümünde bu alanın ismini değiştirir.)
        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd") : Bu anotasyon ile tarih alanının formatını belirtiriz. (JSON dönüşümünde bu alanın formatını değiştirir.)
        @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"}) : Bu anotasyon ile Hibernate tarafından eklenen alanları yok sayarız. (Lazy loading kullanıldığında bu alanlar eklenir.)
        @JsonInclude(JsonInclude.Include.NON_NULL) : Bu anotasyon ile JSON dönüşümünde null olan alanları yok sayarız. (Bu sayede JSON dönüşümünde boş alanlar dönmez.)
        @JsonPropertyOrder({"id", "name", "surname"}) : Bu anotasyon ile JSON dönüşümünde alanların sırasını belirleriz. (JSON dönüşümünde alanların sırası değiştirilebilir.)
        @JsonIgnoreType             : Bu anotasyon ile sınıfın JSON dönüşümünde yok sayılmasını sağlar. (Bu sınıfın JSON dönüşümünde kullanılmamasını sağlar.)
        @JsonCreator                : Bu anotasyon ile sınıfın JSON dönüşümünde kullanılacak constructor'ı belirtiriz. (JSON dönüşümünde bu constructor kullanılır.)
        @JsonValue                  : Bu anotasyon ile sınıfın JSON dönüşümünde kullanılacak metodu belirtiriz. (JSON dönüşümünde bu metot kullanılır.)
        @JsonAnyGetter              : Bu anotasyon ile sınıfın JSON dönüşümünde kullanılacak metodu belirtiriz. (JSON dönüşümünde bu metot kullanılır. Bu metot ile dinamik alanlar eklenebilir.)
        @JsonAnySetter              : Bu anotasyon ile sınıfın JSON dönüşümünde kullanılacak metodu belirtiriz. (JSON dönüşümünde bu metot kullanılır. Bu metot ile dinamik alanlar eklenebilir.)
        @JsonIgnoreProperties(ignoreUnknown = true) : Bu anotasyon ile JSON dönüşümünde bilinmeyen alanları yok sayarız. (JSON dönüşümünde bilinmeyen alanlar yok sayılır.)
        @JsonBackReference          : Bu anotasyon ile JSON dönüşümünde referans döngülerini yok sayarız. (JSON dönüşümünde referans döngüleri yok sayılır.)
        @JsonManagedReference   : Bu anotasyon ile JSON dönüşümünde referans döngülerini yönetiriz. (JSON dönüşümünde referans döngüleri yönetilir. Bu anotasyon ile referans döngüleri yönetilebilir.)

        @Enumerated(EnumType.STRING) : Bu anotasyon ile enum tipindeki alanların veritabanında nasıl saklanacağını belirtiriz. (Enum tipindeki alanlar veritabanında string olarak saklanır.)
        @Enumerated(EnumType.ORDINAL) : Bu anotasyon ile enum tipindeki alanların veritabanında nasıl saklanacağını belirtiriz. (Enum tipindeki alanlar veritabanında ordinal (0, 1 gibi) olarak saklanır.)


        Daha fazla anotasyon için: https://www.baeldung.com/jackson-annotations

------------------------------------------------------------------------------------------------------------------------
        Spring Application Starter Settings
------------------------------------------------------------------------------------------------------------------------
    Spring uygulaması ayağa kaldırılırken kullandığımız yeteneklere göre @SpringBootApplication anotasyonu ile işaretlenmiş starter classına aşağıdaki tanımlamaların yapılması gereklidir.
        @EntityScan(basePackages = {"com.sao"})             : @Entity anotasyonu ile işaterli sınıfların spring uygulamasında görülmesini sağlar.
        @ComponentScan(basePackages = {"com.sao"})          : @RestController, @Service ve @Repository anotasyonları ile işaterli sınıfların spring uygulamasında görülmesini sağlar.
        @EnableJpaRepositories(basePackages = {"com.sao"})  : JpaRepositroy interface ini kullanırsak bu sınıfları görmesini sağlar.

------------------------------------------------------------------------------------------------------------------------
        Spring Validations
------------------------------------------------------------------------------------------------------------------------
    Spring validation bağımlılığı eklenerek kullanılır. (Annotationlar Jakarta olmalı)
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-validation</artifactId>
                </dependency>

    @NotNull    : Null olmasını istemdiğimiz alanlar için kullanılır.
    @NotEmpty   : Null ve Empty olmasını istemediklerimiz için kullanılır.
           Blank   : String name;       gibi tanımlanırsa.
           Null    : String name=null;  gibi tanımlanırsa.
           Empty   : String name="";    gibi tanımlanırsa.
    @Size       : Minimum ve Maksimum değerleri kontorl eder.
    @Min        : Sadece minimum değer kontrolü
    @Max        : Sadece maksimum değer kontrolü
    @Email      : Email formatında giriş yapılıp yapılmadığını kontrol eder.
    @Valid      : DTO Sınıfında tanımlı valid anotasyonlarını aktif hale getirir.

    DTO Class'da tanımlanan validasyonların çalışabilmesi için RestController de tanımlanan  alana @Valid anotasyonu eklenmelidir.
                @NotNull(message = "İsim alanı boş bırakılamaz!")
                private String name;
               ------
                @PostMapping("/save")
                @Override                                  ------
                public StudentDto saveStudent(@RequestBody @Valid StudentDtoIU studentDtoIU) {
                                                           ------
                    return studentService.saveStudent(studentDtoIU);
                }

------------------------------------------------------------------------------------------------------------------------
        Application Properties
------------------------------------------------------------------------------------------------------------------------
        Bunun benzeri .properties değil .yaml uzantılı dosyadır. Sadece farklı standarda sahiptir.
        Spring uygulama ayağa kalkarken application.properties dosyasını okuyup buna göre ayarlamaları yapar.
        Mevcut spring sabitleri yerine kendi değişken ayarlamalarımızı da tanımlayabiliriz.

        @PropertySource : application.properties dosyasında farklı bir isim vermek istenirse, Spring Projesinini ayağa kaldırıldığı
                        @SpringBootApplication anotasyonu ile işaretli sınıfa
                        @PropertySource(value = "classpath:app.properties") anotasyon eklemesi yapılır.
        @Value          : application.properties dosyasından veri çekmek için kullanılır. Bu yeteneği kullanabilmek için bu anotasyonun kullanıldığı sınıfa
                        @Component anotasyonu eklenmelidir. Bu sayede Uygulama ayağa kalkardan @Value anotasyonu ile işaretlenen alanlar properties dosyasından doldurulur ve spring container da bean oluşur.

        @ConfigurationProperties    : @Value anotasyonu ile daha hızlı ve tek veriler okunurken @ConfigurationProperties
                                    iç içe geçmiş daha karmaşık yapıları java class'ı gibi okumayı sağlar.
                                    1- Bir Class oluşturularak başına @ConfigurationProperties anotasyonu eklenir.
                                    2- @ConfigurationProperties(prefix = "app") prefix özelliği ile request mapping path özelliği gibi bir base eklenir.
                                       Eklenen bu base application.properties dosyasında ortak olan key kısmını ifade eder.
                                    3- class'da alanlara verilen isimler ile application.properties dosyasındaki alanlar aynı olmalıdır.
                                    4- Kullanabilmek için SpringBoot projesini ayağa kaldıran sınıfa
                                    @EnableConfigurationProperties(value = GlobalPropertiesConfig.class) anotasyonu eklenmelidir.

        Kaynak:
            https://medium.com/@sercan.bedir/spring-boot-application-properties-yap%C4%B1s%C4%B1-4027ba02bcce

------------------------------------------------------------------------------------------------------------------------
        Exception Handling
------------------------------------------------------------------------------------------------------------------------


    @ControllerAdvice   : Bir sınıfın ExceptionHandler sınıfı olduğunu tanıtmak için kullanılır.
    @ExceptionHandler   : Hanadle metodu üserinde tanımlanır. Metodun hangi exception u handle edeceğini belirtmek için:
                            @ExceptionHandler(value = MethodArgumentNotValidException.class) şeklinde kullanılır.

        Kaynak:
            https://dincdev.medium.com/exception-handling-in-java-ceaf264bef25

------------------------------------------------------------------------------------------------------------------------
        Scheduled
------------------------------------------------------------------------------------------------------------------------
        Bir servis yazıldığında beli bir saat ve zamanda çalışması isteniyorsa @Scheduled anatosyonu kullanılarak bu işlem yapılabilir.

        İlk önce Scheduled altyapısını kullanmak için @SpringBootApplication anotasyonu ile işaterli
        starter sınıfına @EnableScheduling anotasyonu eklenerek scheduling aktif hale getirilir.

        Scheduling altyapısını kullanacak metot @Scheduled anotasyonu ile işaretlenir. Metotların bulunduğu sınıfın SpringContainer'da
        bean oluşturması için @Component anotasyonu ya da benzerleri(@Service, @Bean vb.) eklenmelidir.
        @Scheduled anotasyonu içine parametre alarak özel planlamalar yapılabilir.

            fixedRate       : Belirtilen milisaniye aralıklarla metodu çalıştırır. Önceki çalışmanın bitiş zamanı dikkate alınmaz, belirtilen aralıkta bir sonraki çalışma başlatılır.
                                @Scheduled(fixedRate = 5000) // Her 5 saniyede bir çalışır

            fixedDelay      : Önceki çalışmanın bitiş zamanından itibaren belirtilen milisaniye gecikmeyle metodu çalıştırır. Bir çalışmanın uzun sürmesi bir sonraki çalışmanın başlangıç zamanını etkiler.
                                @Scheduled(fixedDelay = 5000) // Önceki görev bittikten 5 saniye sonra çalışır

            cron            : Cron ifadesi, saniye, dakika, saat, gün, ay ve haftanın günü gibi zaman birimlerini belirten altı veya yedi alandan oluşur.
                            "*" tüm olası değerleri ifade eder. "?" ise belirtilmemiş anlamına gelir ve yalnızca haftanın günü (day-of-week) veya gün (day-of-month) alanlarında kullanılır.
                            İki alanı aynı anda kullanamazsınız. Birini belirtirseniz, diğerini ? ile belirtmeniz gerekir.
                                @Scheduled(cron = "0 0 * * * *") // Her saat başı çalışır
                                @Scheduled(cron = "0 15 10 * * ?") // Her gün saat 10:15'te
                                    Özetle, 0 15 10 * * ? ifadesi şu anlama gelir:
                                    0: Saniye (0. saniye)
                                    15: Dakika (15. dakika)
                                    10: Saat (10. saat)
                                    *: Her gün
                                    *: Her ay
                                    ?: Haftanın günü belirtilmemiş (çünkü gün alanı zaten belirtilmiş)
                                @Scheduled(cron = "0 0/5 * * * ?") // Her 5 dakikada bir çalışır

            initialDelay    : Görevin ilk çalışması için bir gecikme süresi belirtir. fixedRate, fixedDelay veya cron ile birlikte kullanılabilir.
                                @Scheduled(fixedRate = 5000, initialDelay = 10000) // 10 saniye sonra başlar ve her 5 saniyede bir çalışır

            zone            : Varsayılan olarak sunucunun zaman dilimi kullanılır. Farklı bir zaman dilimi belirtmek için zone özelliği kullanılabilir.
                                @Scheduled(cron = "0 0 10 * * ?", zone = "Europe/Istanbul") // Her gün saat 10:00'da İstanbul zaman diliminde çalışır



        Kaynak:
            https://www.baeldung.com/spring-scheduled-tasks

------------------------------------------------------------------------------------------------------------------------
        Unit Test(JUnit)
------------------------------------------------------------------------------------------------------------------------
        Test sınıfları src>test>java altına yazılır.
        @SpringBootTest(classes = {ExceptionManagementStarter.class}) ile uygulamanın ayağa kaldırılacağı sınıf gösterilir.
        Test metotları her zaman void yazılır ve @Test anotasyonu ile işaretlenir.
        Test yazılırken controller katmanı için yazılmaz service katmanından başlanır.

       @BeforeEach: Test metotlarından önce çalışır.
       @AfterEach : Test metotlarından sonra çalışır.

        Kaynak:
            https://semihsaydam.medium.com/unit-test-1-d96ec30a33c7
            https://semihsaydam.medium.com/unit-test-2-48e332106ab
            https://semihsaydam.medium.com/unit-test-3-junit-da1a6497c83b

------------------------------------------------------------------------------------------------------------------------
        Swagger Kullanımı
------------------------------------------------------------------------------------------------------------------------
        Yazılan servislerinin dokümantsayonunu otomatik olarak üretmek için kullanılır.
        Yazılan servisleri controller controller olarak böler, servisler,metotlar, metotların tiplerini bize sunmaya yarar.
        El ile bu dokümantasyonun oluşturulup güncel tutulması zordur. Swagger bunu bizim yerimize yapmaktadır.

        http://localhost:8080/swagger-ui.html

        Kaynak:
            https://medium.com/android-t%C3%BCrkiye/swagger-nedir-ne-i%CC%87%C5%9Fe-yarar-e8c12a9e9e7f

------------------------------------------------------------------------------------------------------------------------
        Pagination & Sorting Kullanımı
------------------------------------------------------------------------------------------------------------------------
        Sorgulama yaparken bir anda tüm listeyi çekmek yerine sayfa başına gösterilecek veri miktarını ayarlayarak performans artırmaya yarar.
        Sayfa numaraları 0'dan başlar.

        Kaynak:
            https://medium.com/@humeyrakoseogluu/java-spring-boot-pagination-5840603a65db

------------------------------------------------------------------------------------------------------------------------

Ortak Versiyon Bilgileri
    Java        : 17.0.8
    Spring      : 3.4.1
    Maven       : 3.9.9 (Bundled)
    PostgreSQL  : 16.2.1 (psql -V -> 16.2) 16.6.3
                  14.15 (binary)
------------------------------------------------------------------------------------------------------------------------

 https://github.com/saozdemir/SpringBootWorkspace.git