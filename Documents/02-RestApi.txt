|----------------------------------------------------------------------------------------------------------------------|
|-------------------------------------------------------REST API-------------------------------------------------------|
|----------------------------------------------------------------------------------------------------------------------|
    Web tabanlı hizmetlerin diğer platformlarla iletişim kurmasını sağlar.

    Client tarafı isteğini http protokolü üzerinden url adresi ile isteğini tetikler.
    Gelen cevap JSON formatındadır.
    Restful web servislerinin alternatifi soap (xml tabanlı) web servisleridir.

        HTTP Metotları
            C => Create => POST
            R => Read   => GET
            U => Update => PUT
            D => Delete => DELETE

        HTTP Status Code
            1XX => Informational (Bilgilendirme)
            2XX => Success (Başarılı)
            3XX => Redirection (Yönlendirme)
            4XX => Client Error (Client tarafından yanlış istek atılmıştır.)
            5XX => Server Error ()
------------------------------------------------------------------------------------------------------------------------
    HTTP STATUS CODES
------------------------------------------------------------------------------------------------------------------------
    1xx - Bilgilendirme (Informational)
        Bu kodlar, istemcinin isteğinin alındığını ve işlenmekte olduğunu belirtir.
            100 Continue            : İstemci isteğine devam edebilir. Sunucu, ilk kısmı aldı ve sorun olmadığını belirtti.
            101 Switching Protocols : Sunucu, istemcinin protokol değiştirme isteğini kabul etti.

    2xx - Başarı (Success)
        Bu kodlar, istemcinin isteğinin başarıyla alındığını ve işlendiğini belirtir.
            200 OK                  : İstek başarılı oldu ve sunucu istenen bilgiyi döndürüyor.
            201 Created             : İstek başarılı oldu ve sunucu bir kaynak oluşturdu.
            202 Accepted            : İstek alındı ancak henüz işlenmedi.
            204 No Content          : İstek başarılı ancak döndürülecek içerik yok.

    3xx - Yönlendirme (Redirection)
        Bu kodlar, istemcinin isteğini tamamlamak için başka bir yere yönlendirilmesi gerektiğini belirtir.
            301 Moved Permanently   : Kaynak kalıcı olarak başka bir URL'ye taşındı.
            302 Found               : Kaynak geçici olarak başka bir URL'de bulunuyor.
            303 See Other           : Kaynağa başka bir URL'den erişilmesi gerekiyor.
            304 Not Modified        : Kaynak, son erişimden bu yana değişmedi (genellikle önbellekleme için kullanılır).

    4xx - İstemci Hatası (Client Error)
        Bu kodlar, istemcinin isteğinin hatalı olduğunu belirtir.
            400 Bad Request         : Sunucu, isteği anlayamadı (örneğin, bozuk bir veri formatı).
            401 Unauthorized        : İstemci yetkilendirme gerektiriyor.
            403 Forbidden           : İstemci, kaynağa erişim yetkisine sahip değil.
            404 Not Found           : İstenen kaynak sunucuda bulunamadı.
            405 Method Not Allowed  : İstek yöntemi (GET, POST, vb.) izin verilmiyor.
            408 Request Timeout     : Sunucu, istemcinin isteği tamamlamasını çok uzun süre bekledi.

    5xx - Sunucu Hatası (Server Error)
        Bu kodlar, sunucunun istemcinin isteğini işleyemediğini belirtir.
            500 Internal Server Error: Genel bir sunucu hatası.
            501 Not Implemented     : Sunucu, istenen işlemi desteklemiyor.
            502 Bad Gateway         : Sunucu, geçerli olmayan bir yanıt aldı (örneğin, başka bir sunucudan).
            503 Service Unavailable : Sunucu şu anda isteği işleyemiyor (örneğin, bakım nedeniyle).
            504 Gateway Timeout     : Sunucu, başka bir sunucudan yanıt beklerken zaman aşımına uğradı.

------------------------------------------------------------------------------------------------------------------------
    KATMANLI MİMARİ
------------------------------------------------------------------------------------------------------------------------
    Spring Katmanlı Mimari yapısı
        +------+    +----------+    +-------+    +----------------+    +--------+
        |Client| => |Controller| => |Service| => |DAO (Repository)| => |DataBase|
        +------+  ^ +----------+    +-------+    +----------------+    +--------+
                JSON    API Layer   Business        Persistence
                DTO's               Logic           Logic

    Context and Dependecy Injection
        Inverion of Control (IoC): Bean oluşturmaya denir
        Dependency Injection (DI): Bu bean'i kullanmaya denir.

------------------------------------------------------------------------------------------------------------------------
    ANNOTATION VE KULLANIMLARI
------------------------------------------------------------------------------------------------------------------------
        @GetMapping : GET işlemi için kök url'e ekleme yapılarak sorgulama yapar
                        @GetMapping(path = "/list")
                        @GetMapping(path = "/list/{id}")
        @PostMapping: POST işlemi ile yeni veri eklenirken kullanılır.

        @DeleteMapping: DELETE işlemi için kullanılır.
                            DELETE: http://localhost:8080/rest/api/employee/delete-employee/1
                            @DeleteMapping(path = "/delete-employee/{id}")

        @PutMapping : PUT işlemi (Update) için kullanılır.
                            PUT: http://localhost:8080/rest/api/employee/update-employee/2
                            {
                                "id": 2,
                                "name": "Seyit Ahmet",
                                "surname": "ÖZDEMİR"
                            }
                            @PutMapping(path = "/update-employee/{id}")



        Controller  : Gelen isteği karşılayan katman. Bir aksiyon oluştuğunda isteği alır servis katmanına gönderir. (Controller)
                @RestController: Bu anotasyon ile controller katmanı olduğunu belirtiriz.
        Service     : Kontrolleri gerçekleştirir. Lojik kontrollerin yapıldığı alandır. Dolu mu? Boş mu? vs. (Business)
                @Service : Bu anotasyon ile service katmanı olduğu belirtilir.
        Repository  : Veritabanına erişmek için kullanılan katmandır. (Persistence)
                @Repository: Bu anotasyon ile persistence katmanı olduğu belirtilir.

        Not: Spring context içinde @RestController, @Service ve @Repository anotasyonları ile de bean oluşturulur.

       @AutoWired: Enjekte etmek anlamına gelir. Controller katmanına bu anotasyon eklenince Spring Context içerisinde oluşturulan @Service bean'ini getirir.



        @PathVariable   : Sorgu için gelen değeri kök url den ayırarak değişkene atamak için kullanılır.
                            GET: http://localhost:8080/rest/api/employee-list/1

                            @GetMapping(path = "/list/{id}")
                            public Employee getEmployeeById(@PathVariable(name = "id", required = true) Long id) {
                                return employeeService.getEmployeeById(id);
                            }
        @RequestParam   : Birden fazla kriter içren sorgular için kullanılır.
                            GET: http://localhost:8080/rest/api/employee/with-params?name=Emir&surname=ÖZDEMİR

                            @GetMapping(path = "/with-params")
                            public List<Employee> getEmployeeWithParams(@RequestParam(name = "name", required = false) String name,
                                                                        @RequestParam(name = "surname", required = false) String surname) {
                                return employeeService.getEmployeeWithParams(name, surname);
                            }
        @RequestBody    : JSON formatında yeni ekleme yapılmak istendiğinde kullanılır.
                            POST: http://localhost:8080/rest/api/employee/save-employee
                                {
                                    "id": 4,
                                    "name": "Miray",
                                    "surname": "ÖZDEMİR"
                                }
                            @PostMapping(path = "/save-employee")
                            public Employee saveEmployee(@RequestBody Employee newEmployee){
                                return employeeService.saveEmployee(newEmployee);
                            }
