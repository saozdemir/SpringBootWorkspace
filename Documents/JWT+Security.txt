|----------------------------------------------------------------------------------------------------------------------|
|---------------------------------------------------JWT + SECURITY-----------------------------------------------------|
|----------------------------------------------------------------------------------------------------------------------|
    JWT (JSON Web Token)
        Web servis içindeki metotları kullanmak için yetki oluşturmak için kullanılır.
        Bir JWT 3 parçadan oluşur. Token "." işaretleri ile parçalanmıştır.
            Header              : Token'ın şifrelendiği algoritma bilgisinin tutulduğu alandır.
            Payload             : Data'nın tutulduğu alandır. Kullanıcı adı, oluşturma tarihi yetkileri içerir.
            Verify Signature    : İmza bölümü, belirli bir imza ile kriptolama işlemini yapar.
                                Bir secret ket oluşturarak token oluşturup çözülür.


            Authentication  : Kimlik doğrulama
            Authorization   : Sisteme giriş yetki kontrolü

             +------+    +------+    +----------+    +-------+    +----------------+    +--------+
             |Filter| => |Client| => |Controller| => |Service| => |DAO (Repository)| => |DataBase|
             +------+    +------+    +----------+    +-------+    +----------------+    +--------+
               ^^
            Filter: Token isteğinin doğrulandığı alandır. Kriterden geçerse controllere geçer.
            Başarılı ise isteğe cevap verir. Başarısız ise cevap vermez. Bu sayede yetkisiz kullanıcıların
            sisteme girişine izin verilmez.

        1- JwtService adında token üretip parse edebilen bir servis yazıldı.
        Spring container da nesnesi oluşması için @Comonent anotasyonu ile işaretlendi.

        2- JwtAuthenticationFilter adında filtre katmanı olarak çalışacak bir sınıf oluşturuldu.
        Spring container da bean oluşması için @Component anotasyonu ile işaretlendi
        OncePerRequestFilter sınıfı extend edilerek security yeteneklerinin kullanımı sağlandı.
        Bu katman kullanıcın yetkisi varsa Contoller katmanını kullanma izni verir, yoksa izin vermez.

        3- AppConfig adında bir sınıf oluşturularak burada kullanıcını veritabanında aranması,
        password encoding işlemlerinin yapılması ve authenticationProvider metodu ile kullanıcı kontrolleri yapıldı.
        AppConfig sınıfının bir konfigürasyon sınıfı olduğunu spring context de tanımlamak için
        @Configuration anotasyonu ile işaretlendi.

        Secret Key Generator:
            https://8gwifi.org/jwsgen.jsp

        Kaynak:
            https://jwt.io/
            https://tugrulbayrak.medium.com/jwt-json-web-tokens-nedir-nasil-calisir-5ca6ebc1584a
            https://tugrulbayrak.medium.com/jwt-json-web-tokens-ile-express-rest-api-g%C3%BCvenli%C4%9Fi-2-517cc44e846c